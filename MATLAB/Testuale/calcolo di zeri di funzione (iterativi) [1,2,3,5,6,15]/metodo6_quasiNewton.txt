--------------------------------------------------
[6] METODO QUASI-NEWTON
Metodo quasi-Newton per il calcolo degli zeri di funzione.
--------------------------------------------------

function [x1, i, res] = metodo6_quasiNewton(f, x0, h, tol, n)

    % x0 = xk-1
    % x1 = xk

    % Controllo che l'incremento (h) sia maggiore di 0
    if h <= 0
        fprintf("Errore, l'incremento deve essere maggiore di zero.");
        return  % Termino
    end

    % Itero da 0 a n-1
    for i = 0:n-1

        fx0 = f(x0);

        % Controllo che il denominatore sia diverso da zero
        den = f(x0+h) - fx0;  % Denominatore
        if den == 0
            fprintf("Errore, impossibile dividere per zero.");
            return  % Termino
        end

        x1 = x0 - h * (fx0/den);  % Risultato finale

        % Verifico se l'errore Ã¨ minore della tolleranza (e termino)
        err = abs(x1-x0) / abs(x1);  % Errore relativo
        if err < tol
            res = f(x1);  % Salvo il residuo
            return  % Termino
        end

        % Approssimazione
        x0 = x1;

    end

    i = -1;  % Flag di errore
    res = f(x1);  % Salvo il residuo

end


--------------------------------------------------
[6] METODO QUASI-NEWTON: TEST
--------------------------------------------------

clear
clc

f = @(x) exp(x) - 1 - cos(x);  % e^x = exp(x)
x0 = .5;
h = 1e-6;
tol = 1e-8;
n = 100;

[x1, i, res] = metodo6_quasiNewton(f, x0, h, tol, n);

fprintf("Risultato: %f\n", x1);
fprintf("Iterate: %d\n", i);
fprintf("Residuo: %f\n", res);
